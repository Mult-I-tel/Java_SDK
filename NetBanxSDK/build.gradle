apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'

repositories {
	mavenCentral()
}

jar {
	baseName = 'NetBanxSDK'
	version = "0.2.0"
}

if (JavaVersion.current().isJava8Compatible()) {
	tasks.withType(Javadoc) {
		// disable the crazy super-strict doclint tool in Java 8
		//noinspection SpellCheckingInspection
		options.addStringOption('Xdoclint:none', '-quiet')
	}
}

sourceCompatibility = 1.6

dependencies {
	compile group: 'com.google.code.gson', name: 'gson', version: '[2.2.2,)'
	testCompile group: 'junit', name: 'junit', version: '[4,)'
	testCompile group: 'com.google.code.gson', name: 'gson', version: '[2.2.2,)'
	checkstyle 'com.puppycrawl.tools:checkstyle:6.1'
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.0'
}

checkstyle {
	sourceSets = [sourceSets.main]
}

test{
	include "sdk/test/*"

	reports.html.destination = "$buildDir/reports/tests/"
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from tasks.javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar

    archives javadocJar
    archives sourcesJar
}

signing {
    sign configurations.archives
}

group = 'com.optimalpayments'
version = '0.2.0'

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
              authentication(userName: sonaUsername, password: sonaPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                authentication(userName: sonaUsername, password: sonaPassword)
            }

            pom.project {
               name 'OptimalPayments SDK'
               packaging 'jar'
               description 'An SDK to integrate with the OptimalPayments Rest API'
               url 'https://developer.optimalpayments.com'

               scm {
                   url 'scm:git@github.com:OptimalPayments/Java_SDK.git'
                   connection 'scm:git@github.com:OptimalPayments/Java_SDK.git'
                   developerConnection 'scm:git@github.com:OptimalPayments/Java_SDK.git'
               }

               licenses {
                   license {
                       name 'The MIT License'
                       url 'http://opensource.org/licenses/MIT'
                       distribution 'repo'
                   }
               }

               developers {
                   developer {
                       id 'OptimalPayments'
                       name 'Optimal Payments'
                   }
               }
           }
        }
    }
}